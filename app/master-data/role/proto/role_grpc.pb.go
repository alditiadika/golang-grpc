// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.8
// source: app/master-data/role/proto/role.proto

package master_role

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MasterRoleService_GetAllRole_FullMethodName = "/roleProto.MasterRoleService/GetAllRole"
	MasterRoleService_GetOneUser_FullMethodName = "/roleProto.MasterRoleService/GetOneUser"
)

// MasterRoleServiceClient is the client API for MasterRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterRoleServiceClient interface {
	GetAllRole(ctx context.Context, in *GetAllRoleRequest, opts ...grpc.CallOption) (*GetAllRoleResponse, error)
	GetOneUser(ctx context.Context, in *GetOneRoleRequest, opts ...grpc.CallOption) (*GetOneRoleResponse, error)
}

type masterRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterRoleServiceClient(cc grpc.ClientConnInterface) MasterRoleServiceClient {
	return &masterRoleServiceClient{cc}
}

func (c *masterRoleServiceClient) GetAllRole(ctx context.Context, in *GetAllRoleRequest, opts ...grpc.CallOption) (*GetAllRoleResponse, error) {
	out := new(GetAllRoleResponse)
	err := c.cc.Invoke(ctx, MasterRoleService_GetAllRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRoleServiceClient) GetOneUser(ctx context.Context, in *GetOneRoleRequest, opts ...grpc.CallOption) (*GetOneRoleResponse, error) {
	out := new(GetOneRoleResponse)
	err := c.cc.Invoke(ctx, MasterRoleService_GetOneUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterRoleServiceServer is the server API for MasterRoleService service.
// All implementations must embed UnimplementedMasterRoleServiceServer
// for forward compatibility
type MasterRoleServiceServer interface {
	GetAllRole(context.Context, *GetAllRoleRequest) (*GetAllRoleResponse, error)
	GetOneUser(context.Context, *GetOneRoleRequest) (*GetOneRoleResponse, error)
	mustEmbedUnimplementedMasterRoleServiceServer()
}

// UnimplementedMasterRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMasterRoleServiceServer struct {
}

func (UnimplementedMasterRoleServiceServer) GetAllRole(context.Context, *GetAllRoleRequest) (*GetAllRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRole not implemented")
}
func (UnimplementedMasterRoleServiceServer) GetOneUser(context.Context, *GetOneRoleRequest) (*GetOneRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneUser not implemented")
}
func (UnimplementedMasterRoleServiceServer) mustEmbedUnimplementedMasterRoleServiceServer() {}

// UnsafeMasterRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterRoleServiceServer will
// result in compilation errors.
type UnsafeMasterRoleServiceServer interface {
	mustEmbedUnimplementedMasterRoleServiceServer()
}

func RegisterMasterRoleServiceServer(s grpc.ServiceRegistrar, srv MasterRoleServiceServer) {
	s.RegisterService(&MasterRoleService_ServiceDesc, srv)
}

func _MasterRoleService_GetAllRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRoleServiceServer).GetAllRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterRoleService_GetAllRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRoleServiceServer).GetAllRole(ctx, req.(*GetAllRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRoleService_GetOneUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRoleServiceServer).GetOneUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MasterRoleService_GetOneUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRoleServiceServer).GetOneUser(ctx, req.(*GetOneRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterRoleService_ServiceDesc is the grpc.ServiceDesc for MasterRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "roleProto.MasterRoleService",
	HandlerType: (*MasterRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllRole",
			Handler:    _MasterRoleService_GetAllRole_Handler,
		},
		{
			MethodName: "GetOneUser",
			Handler:    _MasterRoleService_GetOneUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/master-data/role/proto/role.proto",
}
