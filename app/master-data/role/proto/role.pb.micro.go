// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: app/master-data/role/proto/role.proto

package master_role

import (
	fmt "fmt"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MasterRoleService service

func NewMasterRoleServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "MasterRoleService.GetAllRole",
			Path:    []string{"/master-role"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		{
			Name:    "MasterRoleService.GetOneUser",
			Path:    []string{"/master-role/{roleName}"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for MasterRoleService service

type MasterRoleService interface {
	GetAllRole(ctx context.Context, in *GetAllRoleRequest, opts ...client.CallOption) (*GetAllRoleResponse, error)
	GetOneUser(ctx context.Context, in *GetOneRoleRequest, opts ...client.CallOption) (*GetOneRoleResponse, error)
}

type masterRoleService struct {
	c    client.Client
	name string
}

func NewMasterRoleService(name string, c client.Client) MasterRoleService {
	return &masterRoleService{
		c:    c,
		name: name,
	}
}

func (c *masterRoleService) GetAllRole(ctx context.Context, in *GetAllRoleRequest, opts ...client.CallOption) (*GetAllRoleResponse, error) {
	req := c.c.NewRequest(c.name, "MasterRoleService.GetAllRole", in)
	out := new(GetAllRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRoleService) GetOneUser(ctx context.Context, in *GetOneRoleRequest, opts ...client.CallOption) (*GetOneRoleResponse, error) {
	req := c.c.NewRequest(c.name, "MasterRoleService.GetOneUser", in)
	out := new(GetOneRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MasterRoleService service

type MasterRoleServiceHandler interface {
	GetAllRole(context.Context, *GetAllRoleRequest, *GetAllRoleResponse) error
	GetOneUser(context.Context, *GetOneRoleRequest, *GetOneRoleResponse) error
}

func RegisterMasterRoleServiceHandler(s server.Server, hdlr MasterRoleServiceHandler, opts ...server.HandlerOption) error {
	type masterRoleService interface {
		GetAllRole(ctx context.Context, in *GetAllRoleRequest, out *GetAllRoleResponse) error
		GetOneUser(ctx context.Context, in *GetOneRoleRequest, out *GetOneRoleResponse) error
	}
	type MasterRoleService struct {
		masterRoleService
	}
	h := &masterRoleServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MasterRoleService.GetAllRole",
		Path:    []string{"/master-role"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MasterRoleService.GetOneUser",
		Path:    []string{"/master-role/{roleName}"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&MasterRoleService{h}, opts...))
}

type masterRoleServiceHandler struct {
	MasterRoleServiceHandler
}

func (h *masterRoleServiceHandler) GetAllRole(ctx context.Context, in *GetAllRoleRequest, out *GetAllRoleResponse) error {
	return h.MasterRoleServiceHandler.GetAllRole(ctx, in, out)
}

func (h *masterRoleServiceHandler) GetOneUser(ctx context.Context, in *GetOneRoleRequest, out *GetOneRoleResponse) error {
	return h.MasterRoleServiceHandler.GetOneUser(ctx, in, out)
}
