// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: app/master-data/role/proto/role.proto

package master_role

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAllRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAllRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllRoleRequestMultiError, or nil if none found.
func (m *GetAllRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Skip

	// no validation rules for Take

	if len(errors) > 0 {
		return GetAllRoleRequestMultiError(errors)
	}

	return nil
}

// GetAllRoleRequestMultiError is an error wrapping multiple validation errors
// returned by GetAllRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAllRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllRoleRequestMultiError) AllErrors() []error { return m }

// GetAllRoleRequestValidationError is the validation error returned by
// GetAllRoleRequest.Validate if the designated constraints aren't met.
type GetAllRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllRoleRequestValidationError) ErrorName() string {
	return "GetAllRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllRoleRequestValidationError{}

// Validate checks the field values on GetOneRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOneRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOneRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOneRoleRequestMultiError, or nil if none found.
func (m *GetOneRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOneRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleName

	if len(errors) > 0 {
		return GetOneRoleRequestMultiError(errors)
	}

	return nil
}

// GetOneRoleRequestMultiError is an error wrapping multiple validation errors
// returned by GetOneRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOneRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOneRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOneRoleRequestMultiError) AllErrors() []error { return m }

// GetOneRoleRequestValidationError is the validation error returned by
// GetOneRoleRequest.Validate if the designated constraints aren't met.
type GetOneRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOneRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOneRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOneRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOneRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOneRoleRequestValidationError) ErrorName() string {
	return "GetOneRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOneRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOneRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOneRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOneRoleRequestValidationError{}

// Validate checks the field values on GetAllRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllRoleResponseMultiError, or nil if none found.
func (m *GetAllRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsError

	// no validation rules for ErrMessage

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllRoleResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllRoleResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllRoleResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllRoleResponseMultiError(errors)
	}

	return nil
}

// GetAllRoleResponseMultiError is an error wrapping multiple validation errors
// returned by GetAllRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAllRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllRoleResponseMultiError) AllErrors() []error { return m }

// GetAllRoleResponseValidationError is the validation error returned by
// GetAllRoleResponse.Validate if the designated constraints aren't met.
type GetAllRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllRoleResponseValidationError) ErrorName() string {
	return "GetAllRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllRoleResponseValidationError{}

// Validate checks the field values on GetOneRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOneRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOneRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOneRoleResponseMultiError, or nil if none found.
func (m *GetOneRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOneRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsError

	// no validation rules for ErrMessage

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOneRoleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOneRoleResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOneRoleResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOneRoleResponseMultiError(errors)
	}

	return nil
}

// GetOneRoleResponseMultiError is an error wrapping multiple validation errors
// returned by GetOneRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type GetOneRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOneRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOneRoleResponseMultiError) AllErrors() []error { return m }

// GetOneRoleResponseValidationError is the validation error returned by
// GetOneRoleResponse.Validate if the designated constraints aren't met.
type GetOneRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOneRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOneRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOneRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOneRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOneRoleResponseValidationError) ErrorName() string {
	return "GetOneRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOneRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOneRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOneRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOneRoleResponseValidationError{}

// Validate checks the field values on RoleItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleItemMultiError, or nil
// if none found.
func (m *RoleItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ID

	// no validation rules for RoleCode

	// no validation rules for RoleName

	// no validation rules for IsActive

	// no validation rules for CreatedBy

	if all {
		switch v := interface{}(m.GetCreatedDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleItemValidationError{
					field:  "CreatedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleItemValidationError{
					field:  "CreatedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleItemValidationError{
				field:  "CreatedDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ModifiedBy

	if all {
		switch v := interface{}(m.GetModifiedDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleItemValidationError{
					field:  "ModifiedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleItemValidationError{
					field:  "ModifiedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModifiedDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleItemValidationError{
				field:  "ModifiedDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RoleItemMultiError(errors)
	}

	return nil
}

// RoleItemMultiError is an error wrapping multiple validation errors returned
// by RoleItem.ValidateAll() if the designated constraints aren't met.
type RoleItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleItemMultiError) AllErrors() []error { return m }

// RoleItemValidationError is the validation error returned by
// RoleItem.Validate if the designated constraints aren't met.
type RoleItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleItemValidationError) ErrorName() string { return "RoleItemValidationError" }

// Error satisfies the builtin error interface
func (e RoleItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleItemValidationError{}
