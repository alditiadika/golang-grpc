// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries.sql

package role_sql

import (
	"context"
)

const selectAllRole = `-- name: SelectAllRole :many
select id, role_code, role_name, is_active, created_by, created_date, modified_date, modified_by from master_role
`

func (q *Queries) SelectAllRole(ctx context.Context) ([]MasterRole, error) {
	rows, err := q.query(ctx, q.selectAllRoleStmt, selectAllRole)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MasterRole
	for rows.Next() {
		var i MasterRole
		if err := rows.Scan(
			&i.ID,
			&i.RoleCode,
			&i.RoleName,
			&i.IsActive,
			&i.CreatedBy,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.ModifiedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectOneRole = `-- name: SelectOneRole :one
select id, role_code, role_name, is_active, created_by, created_date, modified_date, modified_by from master_role where role_name = $1
`

func (q *Queries) SelectOneRole(ctx context.Context, roleName string) (MasterRole, error) {
	row := q.queryRow(ctx, q.selectOneRoleStmt, selectOneRole, roleName)
	var i MasterRole
	err := row.Scan(
		&i.ID,
		&i.RoleCode,
		&i.RoleName,
		&i.IsActive,
		&i.CreatedBy,
		&i.CreatedDate,
		&i.ModifiedDate,
		&i.ModifiedBy,
	)
	return i, err
}
